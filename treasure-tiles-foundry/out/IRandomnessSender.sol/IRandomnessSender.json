{"abi":[{"type":"function","name":"acceptSubscriptionOwnerTransfer","inputs":[{"name":"subId","type":"uint256","internalType":"uint256"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"addConsumer","inputs":[{"name":"subId","type":"uint256","internalType":"uint256"},{"name":"consumer","type":"address","internalType":"address"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"calculateRequestPriceNative","inputs":[{"name":"_callbackGasLimit","type":"uint32","internalType":"uint32"}],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"cancelSubscription","inputs":[{"name":"subId","type":"uint256","internalType":"uint256"},{"name":"to","type":"address","internalType":"address"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"createSubscription","inputs":[],"outputs":[{"name":"subId","type":"uint256","internalType":"uint256"}],"stateMutability":"nonpayable"},{"type":"function","name":"estimateRequestPriceNative","inputs":[{"name":"_callbackGasLimit","type":"uint32","internalType":"uint32"},{"name":"_requestGasPriceWei","type":"uint256","internalType":"uint256"}],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"fundSubscriptionWithNative","inputs":[{"name":"subId","type":"uint256","internalType":"uint256"}],"outputs":[],"stateMutability":"payable"},{"type":"function","name":"getActiveSubscriptionIds","inputs":[{"name":"startIndex","type":"uint256","internalType":"uint256"},{"name":"maxCount","type":"uint256","internalType":"uint256"}],"outputs":[{"name":"","type":"uint256[]","internalType":"uint256[]"}],"stateMutability":"view"},{"type":"function","name":"getAllRequests","inputs":[],"outputs":[{"name":"","type":"tuple[]","internalType":"struct TypesLib.RandomnessRequest[]","components":[{"name":"subId","type":"uint256","internalType":"uint256"},{"name":"directFundingFeePaid","type":"uint256","internalType":"uint256"},{"name":"callbackGasLimit","type":"uint32","internalType":"uint32"},{"name":"requestId","type":"uint256","internalType":"uint256"},{"name":"message","type":"bytes","internalType":"bytes"},{"name":"condition","type":"bytes","internalType":"bytes"},{"name":"signature","type":"bytes","internalType":"bytes"},{"name":"nonce","type":"uint256","internalType":"uint256"},{"name":"callback","type":"address","internalType":"address"}]}],"stateMutability":"view"},{"type":"function","name":"getConfig","inputs":[],"outputs":[{"name":"maxGasLimit","type":"uint32","internalType":"uint32"},{"name":"gasAfterPaymentCalculation","type":"uint32","internalType":"uint32"},{"name":"fulfillmentFlatFeeNativePPM","type":"uint32","internalType":"uint32"},{"name":"weiPerUnitGas","type":"uint32","internalType":"uint32"},{"name":"blsPairingCheckOverhead","type":"uint32","internalType":"uint32"},{"name":"nativePremiumPercentage","type":"uint8","internalType":"uint8"},{"name":"gasForCallExactCheck","type":"uint32","internalType":"uint32"}],"stateMutability":"view"},{"type":"function","name":"getRequest","inputs":[{"name":"requestId","type":"uint256","internalType":"uint256"}],"outputs":[{"name":"","type":"tuple","internalType":"struct TypesLib.RandomnessRequest","components":[{"name":"subId","type":"uint256","internalType":"uint256"},{"name":"directFundingFeePaid","type":"uint256","internalType":"uint256"},{"name":"callbackGasLimit","type":"uint32","internalType":"uint32"},{"name":"requestId","type":"uint256","internalType":"uint256"},{"name":"message","type":"bytes","internalType":"bytes"},{"name":"condition","type":"bytes","internalType":"bytes"},{"name":"signature","type":"bytes","internalType":"bytes"},{"name":"nonce","type":"uint256","internalType":"uint256"},{"name":"callback","type":"address","internalType":"address"}]}],"stateMutability":"view"},{"type":"function","name":"getSubscription","inputs":[{"name":"subId","type":"uint256","internalType":"uint256"}],"outputs":[{"name":"nativeBalance","type":"uint96","internalType":"uint96"},{"name":"reqCount","type":"uint64","internalType":"uint64"},{"name":"owner","type":"address","internalType":"address"},{"name":"consumers","type":"address[]","internalType":"address[]"}],"stateMutability":"view"},{"type":"function","name":"isInFlight","inputs":[{"name":"requestId","type":"uint256","internalType":"uint256"}],"outputs":[{"name":"","type":"bool","internalType":"bool"}],"stateMutability":"view"},{"type":"function","name":"messageFrom","inputs":[{"name":"r","type":"tuple","internalType":"struct TypesLib.RandomnessRequestCreationParams","components":[{"name":"nonce","type":"uint256","internalType":"uint256"},{"name":"callback","type":"address","internalType":"address"}]}],"outputs":[{"name":"","type":"bytes","internalType":"bytes"}],"stateMutability":"pure"},{"type":"function","name":"pendingRequestExists","inputs":[{"name":"subId","type":"uint256","internalType":"uint256"}],"outputs":[{"name":"","type":"bool","internalType":"bool"}],"stateMutability":"view"},{"type":"function","name":"removeConsumer","inputs":[{"name":"subId","type":"uint256","internalType":"uint256"},{"name":"consumer","type":"address","internalType":"address"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"requestRandomness","inputs":[{"name":"callbackGasLimit","type":"uint32","internalType":"uint32"}],"outputs":[{"name":"requestID","type":"uint256","internalType":"uint256"}],"stateMutability":"payable"},{"type":"function","name":"requestRandomnessWithSubscription","inputs":[{"name":"callbackGasLimit","type":"uint32","internalType":"uint32"},{"name":"subId","type":"uint256","internalType":"uint256"}],"outputs":[{"name":"requestID","type":"uint256","internalType":"uint256"}],"stateMutability":"payable"},{"type":"function","name":"requestSubscriptionOwnerTransfer","inputs":[{"name":"subId","type":"uint256","internalType":"uint256"},{"name":"newOwner","type":"address","internalType":"address"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"setSignatureSender","inputs":[{"name":"newSignatureSender","type":"address","internalType":"address"}],"outputs":[],"stateMutability":"nonpayable"}],"bytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"deployedBytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"methodIdentifiers":{"acceptSubscriptionOwnerTransfer(uint256)":"b2a7cac5","addConsumer(uint256,address)":"bec4c08c","calculateRequestPriceNative(uint32)":"4b160935","cancelSubscription(uint256,address)":"0ae09540","createSubscription()":"a21a23e4","estimateRequestPriceNative(uint32,uint256)":"3255c456","fundSubscriptionWithNative(uint256)":"95b55cfc","getActiveSubscriptionIds(uint256,uint256)":"aefb212f","getAllRequests()":"fb1a002a","getConfig()":"c3f909d4","getRequest(uint256)":"c58343ef","getSubscription(uint256)":"dc311dd3","isInFlight(uint256)":"cd802c91","messageFrom((uint256,address))":"775b839c","pendingRequestExists(uint256)":"41af6c87","removeConsumer(uint256,address)":"cb631797","requestRandomness(uint32)":"811ee32a","requestRandomnessWithSubscription(uint32,uint256)":"1da53c9f","requestSubscriptionOwnerTransfer(uint256,address)":"dac83d29","setSignatureSender(address)":"f8fa0d66"},"rawMetadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"subId\",\"type\":\"uint256\"}],\"name\":\"acceptSubscriptionOwnerTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"subId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"consumer\",\"type\":\"address\"}],\"name\":\"addConsumer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_callbackGasLimit\",\"type\":\"uint32\"}],\"name\":\"calculateRequestPriceNative\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"subId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"cancelSubscription\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"createSubscription\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"subId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_callbackGasLimit\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"_requestGasPriceWei\",\"type\":\"uint256\"}],\"name\":\"estimateRequestPriceNative\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"subId\",\"type\":\"uint256\"}],\"name\":\"fundSubscriptionWithNative\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"startIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxCount\",\"type\":\"uint256\"}],\"name\":\"getActiveSubscriptionIds\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllRequests\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"subId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"directFundingFeePaid\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"callbackGasLimit\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"message\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"condition\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"callback\",\"type\":\"address\"}],\"internalType\":\"struct TypesLib.RandomnessRequest[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getConfig\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"maxGasLimit\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"gasAfterPaymentCalculation\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"fulfillmentFlatFeeNativePPM\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"weiPerUnitGas\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"blsPairingCheckOverhead\",\"type\":\"uint32\"},{\"internalType\":\"uint8\",\"name\":\"nativePremiumPercentage\",\"type\":\"uint8\"},{\"internalType\":\"uint32\",\"name\":\"gasForCallExactCheck\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"}],\"name\":\"getRequest\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"subId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"directFundingFeePaid\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"callbackGasLimit\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"message\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"condition\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"callback\",\"type\":\"address\"}],\"internalType\":\"struct TypesLib.RandomnessRequest\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"subId\",\"type\":\"uint256\"}],\"name\":\"getSubscription\",\"outputs\":[{\"internalType\":\"uint96\",\"name\":\"nativeBalance\",\"type\":\"uint96\"},{\"internalType\":\"uint64\",\"name\":\"reqCount\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"consumers\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"}],\"name\":\"isInFlight\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"callback\",\"type\":\"address\"}],\"internalType\":\"struct TypesLib.RandomnessRequestCreationParams\",\"name\":\"r\",\"type\":\"tuple\"}],\"name\":\"messageFrom\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"subId\",\"type\":\"uint256\"}],\"name\":\"pendingRequestExists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"subId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"consumer\",\"type\":\"address\"}],\"name\":\"removeConsumer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"callbackGasLimit\",\"type\":\"uint32\"}],\"name\":\"requestRandomness\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"requestID\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"callbackGasLimit\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"subId\",\"type\":\"uint256\"}],\"name\":\"requestRandomnessWithSubscription\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"requestID\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"subId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"requestSubscriptionOwnerTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newSignatureSender\",\"type\":\"address\"}],\"name\":\"setSignatureSender\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Randamu\",\"kind\":\"dev\",\"methods\":{\"acceptSubscriptionOwnerTransfer(uint256)\":{\"details\":\"will revert if original owner of subId has not requested that msg.sender become the new owner.\",\"params\":{\"subId\":\"- ID of the subscription\"}},\"addConsumer(uint256,address)\":{\"params\":{\"consumer\":\"- New consumer which can use the subscription\",\"subId\":\"- ID of the subscription\"}},\"calculateRequestPriceNative(uint32)\":{\"params\":{\"_callbackGasLimit\":\"The gas limit for the callback execution\"},\"returns\":{\"_0\":\"The estimated request price in native token (e.g., ETH)\"}},\"cancelSubscription(uint256,address)\":{\"params\":{\"subId\":\"- ID of the subscription\",\"to\":\"- Where to send the remaining subscription balance to\"}},\"createSubscription()\":{\"details\":\"You can manage the consumer set dynamically with addConsumer/removeConsumer.Note to fund the subscription with Native, use fundSubscriptionWithNative. Be sureto send Native with the call, for example:COORDINATOR.fundSubscriptionWithNative{value: amount}(subId);\",\"returns\":{\"subId\":\"- A unique subscription id.\"}},\"estimateRequestPriceNative(uint32,uint256)\":{\"params\":{\"_callbackGasLimit\":\"The gas limit for the callback execution\",\"_requestGasPriceWei\":\"The gas price (in wei) to use for the estimation\"},\"returns\":{\"_0\":\"The estimated total request price in native token (e.g., ETH)\"}},\"fundSubscriptionWithNative(uint256)\":{\"params\":{\"subId\":\"- ID of the subscription\"}},\"getActiveSubscriptionIds(uint256,uint256)\":{\"details\":\"the order of IDs in the list is///*not guaranteed**, therefore, if making successive calls, oneshould consider keeping the blockheight constant to ensure a holistic picture of the contract state\",\"params\":{\"maxCount\":\"maximum number of subscriptions to return, 0 to return all\",\"startIndex\":\"index of the subscription to start from\"}},\"getAllRequests()\":{\"details\":\"This function returns an array of all Request structs stored in the contract.\",\"returns\":{\"_0\":\"An array containing all the Request structs.\"}},\"getRequest(uint256)\":{\"details\":\"This function returns the Request struct associated with the given requestId.\",\"params\":{\"requestId\":\"The ID of the request to retrieve.\"},\"returns\":{\"_0\":\"The Request struct corresponding to the given requestId.\"}},\"getSubscription(uint256)\":{\"params\":{\"subId\":\"- ID of the subscription\"},\"returns\":{\"consumers\":\"- list of consumer address which are able to use this subscription.\",\"nativeBalance\":\"- native balance of the subscription in wei.\",\"owner\":\"- owner of the subscription.\",\"reqCount\":\"- Requests count of subscription.\"}},\"messageFrom((uint256,address))\":{\"details\":\"Creates a hash-based message using the `DST` and `nonce` fields of the `Request` struct. The resulting message is the hash of the encoded values, packed into a byte array.\",\"params\":{\"r\":\"The `Request` struct containing the data for generating the message.\"},\"returns\":{\"_0\":\"A byte array representing the hashed and encoded message.\"}},\"pendingRequestExists(uint256)\":{\"params\":{\"subId\":\"- ID of the subscription\"},\"returns\":{\"_0\":\"true if there exists at least one unfulfilled request for the subscription, false otherwise.\"}},\"removeConsumer(uint256,address)\":{\"params\":{\"consumer\":\"- Consumer to remove from the subscription\",\"subId\":\"- ID of the subscription\"}},\"requestRandomness(uint32)\":{\"details\":\"Initiates a randomness request. The generated randomness will be associated with the returned `requestID`.\",\"params\":{\"callbackGasLimit\":\"How much gas you'd like to receive in your receiveBlocklock callback. Note that gasleft() inside receiveBlocklock may be slightly less than this amount because of gas used calling the function (argument decoding etc.), so you may need to request slightly more than you expect to have inside receiveBlocklock. The acceptable range is [0, maxGasLimit]\"},\"returns\":{\"requestID\":\"The unique identifier assigned to this randomness request.\"}},\"requestRandomnessWithSubscription(uint32,uint256)\":{\"details\":\"Initiates a randomness request. The generated randomness will be associated with the returned `requestID`.\",\"params\":{\"callbackGasLimit\":\"How much gas you'd like to receive in your receiveBlocklock callback. Note that gasleft() inside receiveBlocklock may be slightly less than this amount because of gas used calling the function (argument decoding etc.), so you may need to request slightly more than you expect to have inside receiveBlocklock. The acceptable range is [0, maxGasLimit]\",\"subId\":\"The subscription ID associated with the request\"},\"returns\":{\"requestID\":\"The unique identifier assigned to this randomness request.\"}},\"requestSubscriptionOwnerTransfer(uint256,address)\":{\"params\":{\"newOwner\":\"- proposed new owner of the subscription\",\"subId\":\"- ID of the subscription\"}},\"setSignatureSender(address)\":{\"params\":{\"newSignatureSender\":\"The new address to set.\"}}},\"title\":\"IRandomnessSender interface\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"acceptSubscriptionOwnerTransfer(uint256)\":{\"notice\":\"Accept subscription owner transfer.\"},\"addConsumer(uint256,address)\":{\"notice\":\"Add a consumer to a subscription.\"},\"calculateRequestPriceNative(uint32)\":{\"notice\":\"Calculates the estimated price in native tokens for a request based on the provided gas limit\"},\"cancelSubscription(uint256,address)\":{\"notice\":\"Cancel a subscription\"},\"createSubscription()\":{\"notice\":\"Create a subscription.\"},\"estimateRequestPriceNative(uint32,uint256)\":{\"notice\":\"Estimates the request price in native tokens using a specified gas price\"},\"fundSubscriptionWithNative(uint256)\":{\"notice\":\"Fund a subscription with native.This method expects msg.value to be greater than or equal to 0.\"},\"getActiveSubscriptionIds(uint256,uint256)\":{\"notice\":\"Paginate through all active subscriptions.\"},\"getAllRequests()\":{\"notice\":\"Retrieves all requests.\"},\"getRequest(uint256)\":{\"notice\":\"Retrieves a specific request by its ID.\"},\"getSubscription(uint256)\":{\"notice\":\"Get a subscription.\"},\"messageFrom((uint256,address))\":{\"notice\":\"Generates a message from the given request.\"},\"pendingRequestExists(uint256)\":{\"notice\":\"Check to see if there exists a request commitment consumers for all consumers and keyhashes for a given sub.\"},\"removeConsumer(uint256,address)\":{\"notice\":\"Remove a consumer from a subscription.\"},\"requestRandomness(uint32)\":{\"notice\":\"Requests the generation of a random value.\"},\"requestRandomnessWithSubscription(uint32,uint256)\":{\"notice\":\"Requests the generation of a random value.\"},\"requestSubscriptionOwnerTransfer(uint256,address)\":{\"notice\":\"Request subscription owner transfer.\"},\"setSignatureSender(address)\":{\"notice\":\"Sets signatureSender contract address.\"}},\"notice\":\"Interface for randomness sender contract which sends randomness via callbacks to randomness consumer contracts.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"lib/randomness-solidity/src/interfaces/IRandomnessSender.sol\":\"IRandomnessSender\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":@chainlink/contracts/=lib/randomness-solidity/lib/chainlink/contracts/\",\":@ds-test/=lib/randomness-solidity/lib/forge-std/lib/ds-test/src/\",\":@forge-std/=lib/randomness-solidity/lib/forge-std/src/\",\":@openzeppelin/=lib/openzeppelin-contracts/\",\":chainlink/=lib/randomness-solidity/lib/chainlink/\",\":erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":halmos-cheatcodes/=lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/\",\":openzeppelin-contracts-upgradeable/=lib/randomness-solidity/lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":randomness-solidity/=lib/randomness-solidity/\"]},\"sources\":{\"lib/randomness-solidity/src/interfaces/IRandomnessSender.sol\":{\"keccak256\":\"0x58ee82c4f6e82e5ae2e8bb91760cd1094efd00010bfe0cad3b1aff837b4d94e5\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://46f011b10b1b4f8fbbf6bb898e684056fc4b19e265ddc341f76beb2ee8058400\",\"dweb:/ipfs/QmYouXM8jB7LK9TuESS1DwRpoH2sB9uHdEQZwYjHodyiAm\"]},\"lib/randomness-solidity/src/interfaces/ISubscription.sol\":{\"keccak256\":\"0x07d27a4b676a804ff8ada76aa683e9c30662c8df52fc68d105693444249db538\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://7bc9b42007e254d3ec5acbdcc231425e22164628b7fc829107e3cc85347425c7\",\"dweb:/ipfs/QmTN1iW12TgtQaAdXLr5uCmaG8meG67ocGmJ37sikBCW1H\"]},\"lib/randomness-solidity/src/libraries/BLS.sol\":{\"keccak256\":\"0x3f8dfc97014975855476cd77959369694c33afc1f2977572b41db3e467e85098\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://3734a6336c7602a389b6844e34757bcd72a964709da7f41cc644cab28742624d\",\"dweb:/ipfs/QmTj5BZbsAvwhG75zxRDGDz6QhYgaU2BzqjbJSP2puLHU1\"]},\"lib/randomness-solidity/src/libraries/ModExp.sol\":{\"keccak256\":\"0x91d21821894be2362f9defd2d74b7531704d0f62f7c5a165f37bc486e5d4f785\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://73f4ecf35a84174528f26b1e91aed78dea7f22d1f6a2006a11a5b22ea3e446aa\",\"dweb:/ipfs/QmRyq3TAChiN5ga1TgXTG278n7KrUuTcPzoMj96Q5jdSqB\"]},\"lib/randomness-solidity/src/libraries/TypesLib.sol\":{\"keccak256\":\"0xafa1f2d1d0ed8ff42f40f2ce8dff3ca4b63118521b4673a34f8f801af25ffc0c\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ab5a20714ed923c65c945271015d9161613c101fdf533635cc85c0b871ab6d44\",\"dweb:/ipfs/QmaHEBcg64VZGxvZmus3SZuv58eLc63JYfZikCaWiRJnf8\"]}},\"version\":1}","metadata":{"compiler":{"version":"0.8.20+commit.a1b79de6"},"language":"Solidity","output":{"abi":[{"inputs":[{"internalType":"uint256","name":"subId","type":"uint256"}],"stateMutability":"nonpayable","type":"function","name":"acceptSubscriptionOwnerTransfer"},{"inputs":[{"internalType":"uint256","name":"subId","type":"uint256"},{"internalType":"address","name":"consumer","type":"address"}],"stateMutability":"nonpayable","type":"function","name":"addConsumer"},{"inputs":[{"internalType":"uint32","name":"_callbackGasLimit","type":"uint32"}],"stateMutability":"view","type":"function","name":"calculateRequestPriceNative","outputs":[{"internalType":"uint256","name":"","type":"uint256"}]},{"inputs":[{"internalType":"uint256","name":"subId","type":"uint256"},{"internalType":"address","name":"to","type":"address"}],"stateMutability":"nonpayable","type":"function","name":"cancelSubscription"},{"inputs":[],"stateMutability":"nonpayable","type":"function","name":"createSubscription","outputs":[{"internalType":"uint256","name":"subId","type":"uint256"}]},{"inputs":[{"internalType":"uint32","name":"_callbackGasLimit","type":"uint32"},{"internalType":"uint256","name":"_requestGasPriceWei","type":"uint256"}],"stateMutability":"view","type":"function","name":"estimateRequestPriceNative","outputs":[{"internalType":"uint256","name":"","type":"uint256"}]},{"inputs":[{"internalType":"uint256","name":"subId","type":"uint256"}],"stateMutability":"payable","type":"function","name":"fundSubscriptionWithNative"},{"inputs":[{"internalType":"uint256","name":"startIndex","type":"uint256"},{"internalType":"uint256","name":"maxCount","type":"uint256"}],"stateMutability":"view","type":"function","name":"getActiveSubscriptionIds","outputs":[{"internalType":"uint256[]","name":"","type":"uint256[]"}]},{"inputs":[],"stateMutability":"view","type":"function","name":"getAllRequests","outputs":[{"internalType":"struct TypesLib.RandomnessRequest[]","name":"","type":"tuple[]","components":[{"internalType":"uint256","name":"subId","type":"uint256"},{"internalType":"uint256","name":"directFundingFeePaid","type":"uint256"},{"internalType":"uint32","name":"callbackGasLimit","type":"uint32"},{"internalType":"uint256","name":"requestId","type":"uint256"},{"internalType":"bytes","name":"message","type":"bytes"},{"internalType":"bytes","name":"condition","type":"bytes"},{"internalType":"bytes","name":"signature","type":"bytes"},{"internalType":"uint256","name":"nonce","type":"uint256"},{"internalType":"address","name":"callback","type":"address"}]}]},{"inputs":[],"stateMutability":"view","type":"function","name":"getConfig","outputs":[{"internalType":"uint32","name":"maxGasLimit","type":"uint32"},{"internalType":"uint32","name":"gasAfterPaymentCalculation","type":"uint32"},{"internalType":"uint32","name":"fulfillmentFlatFeeNativePPM","type":"uint32"},{"internalType":"uint32","name":"weiPerUnitGas","type":"uint32"},{"internalType":"uint32","name":"blsPairingCheckOverhead","type":"uint32"},{"internalType":"uint8","name":"nativePremiumPercentage","type":"uint8"},{"internalType":"uint32","name":"gasForCallExactCheck","type":"uint32"}]},{"inputs":[{"internalType":"uint256","name":"requestId","type":"uint256"}],"stateMutability":"view","type":"function","name":"getRequest","outputs":[{"internalType":"struct TypesLib.RandomnessRequest","name":"","type":"tuple","components":[{"internalType":"uint256","name":"subId","type":"uint256"},{"internalType":"uint256","name":"directFundingFeePaid","type":"uint256"},{"internalType":"uint32","name":"callbackGasLimit","type":"uint32"},{"internalType":"uint256","name":"requestId","type":"uint256"},{"internalType":"bytes","name":"message","type":"bytes"},{"internalType":"bytes","name":"condition","type":"bytes"},{"internalType":"bytes","name":"signature","type":"bytes"},{"internalType":"uint256","name":"nonce","type":"uint256"},{"internalType":"address","name":"callback","type":"address"}]}]},{"inputs":[{"internalType":"uint256","name":"subId","type":"uint256"}],"stateMutability":"view","type":"function","name":"getSubscription","outputs":[{"internalType":"uint96","name":"nativeBalance","type":"uint96"},{"internalType":"uint64","name":"reqCount","type":"uint64"},{"internalType":"address","name":"owner","type":"address"},{"internalType":"address[]","name":"consumers","type":"address[]"}]},{"inputs":[{"internalType":"uint256","name":"requestId","type":"uint256"}],"stateMutability":"view","type":"function","name":"isInFlight","outputs":[{"internalType":"bool","name":"","type":"bool"}]},{"inputs":[{"internalType":"struct TypesLib.RandomnessRequestCreationParams","name":"r","type":"tuple","components":[{"internalType":"uint256","name":"nonce","type":"uint256"},{"internalType":"address","name":"callback","type":"address"}]}],"stateMutability":"pure","type":"function","name":"messageFrom","outputs":[{"internalType":"bytes","name":"","type":"bytes"}]},{"inputs":[{"internalType":"uint256","name":"subId","type":"uint256"}],"stateMutability":"view","type":"function","name":"pendingRequestExists","outputs":[{"internalType":"bool","name":"","type":"bool"}]},{"inputs":[{"internalType":"uint256","name":"subId","type":"uint256"},{"internalType":"address","name":"consumer","type":"address"}],"stateMutability":"nonpayable","type":"function","name":"removeConsumer"},{"inputs":[{"internalType":"uint32","name":"callbackGasLimit","type":"uint32"}],"stateMutability":"payable","type":"function","name":"requestRandomness","outputs":[{"internalType":"uint256","name":"requestID","type":"uint256"}]},{"inputs":[{"internalType":"uint32","name":"callbackGasLimit","type":"uint32"},{"internalType":"uint256","name":"subId","type":"uint256"}],"stateMutability":"payable","type":"function","name":"requestRandomnessWithSubscription","outputs":[{"internalType":"uint256","name":"requestID","type":"uint256"}]},{"inputs":[{"internalType":"uint256","name":"subId","type":"uint256"},{"internalType":"address","name":"newOwner","type":"address"}],"stateMutability":"nonpayable","type":"function","name":"requestSubscriptionOwnerTransfer"},{"inputs":[{"internalType":"address","name":"newSignatureSender","type":"address"}],"stateMutability":"nonpayable","type":"function","name":"setSignatureSender"}],"devdoc":{"kind":"dev","methods":{"acceptSubscriptionOwnerTransfer(uint256)":{"details":"will revert if original owner of subId has not requested that msg.sender become the new owner.","params":{"subId":"- ID of the subscription"}},"addConsumer(uint256,address)":{"params":{"consumer":"- New consumer which can use the subscription","subId":"- ID of the subscription"}},"calculateRequestPriceNative(uint32)":{"params":{"_callbackGasLimit":"The gas limit for the callback execution"},"returns":{"_0":"The estimated request price in native token (e.g., ETH)"}},"cancelSubscription(uint256,address)":{"params":{"subId":"- ID of the subscription","to":"- Where to send the remaining subscription balance to"}},"createSubscription()":{"details":"You can manage the consumer set dynamically with addConsumer/removeConsumer.Note to fund the subscription with Native, use fundSubscriptionWithNative. Be sureto send Native with the call, for example:COORDINATOR.fundSubscriptionWithNative{value: amount}(subId);","returns":{"subId":"- A unique subscription id."}},"estimateRequestPriceNative(uint32,uint256)":{"params":{"_callbackGasLimit":"The gas limit for the callback execution","_requestGasPriceWei":"The gas price (in wei) to use for the estimation"},"returns":{"_0":"The estimated total request price in native token (e.g., ETH)"}},"fundSubscriptionWithNative(uint256)":{"params":{"subId":"- ID of the subscription"}},"getActiveSubscriptionIds(uint256,uint256)":{"details":"the order of IDs in the list is///*not guaranteed**, therefore, if making successive calls, oneshould consider keeping the blockheight constant to ensure a holistic picture of the contract state","params":{"maxCount":"maximum number of subscriptions to return, 0 to return all","startIndex":"index of the subscription to start from"}},"getAllRequests()":{"details":"This function returns an array of all Request structs stored in the contract.","returns":{"_0":"An array containing all the Request structs."}},"getRequest(uint256)":{"details":"This function returns the Request struct associated with the given requestId.","params":{"requestId":"The ID of the request to retrieve."},"returns":{"_0":"The Request struct corresponding to the given requestId."}},"getSubscription(uint256)":{"params":{"subId":"- ID of the subscription"},"returns":{"consumers":"- list of consumer address which are able to use this subscription.","nativeBalance":"- native balance of the subscription in wei.","owner":"- owner of the subscription.","reqCount":"- Requests count of subscription."}},"messageFrom((uint256,address))":{"details":"Creates a hash-based message using the `DST` and `nonce` fields of the `Request` struct. The resulting message is the hash of the encoded values, packed into a byte array.","params":{"r":"The `Request` struct containing the data for generating the message."},"returns":{"_0":"A byte array representing the hashed and encoded message."}},"pendingRequestExists(uint256)":{"params":{"subId":"- ID of the subscription"},"returns":{"_0":"true if there exists at least one unfulfilled request for the subscription, false otherwise."}},"removeConsumer(uint256,address)":{"params":{"consumer":"- Consumer to remove from the subscription","subId":"- ID of the subscription"}},"requestRandomness(uint32)":{"details":"Initiates a randomness request. The generated randomness will be associated with the returned `requestID`.","params":{"callbackGasLimit":"How much gas you'd like to receive in your receiveBlocklock callback. Note that gasleft() inside receiveBlocklock may be slightly less than this amount because of gas used calling the function (argument decoding etc.), so you may need to request slightly more than you expect to have inside receiveBlocklock. The acceptable range is [0, maxGasLimit]"},"returns":{"requestID":"The unique identifier assigned to this randomness request."}},"requestRandomnessWithSubscription(uint32,uint256)":{"details":"Initiates a randomness request. The generated randomness will be associated with the returned `requestID`.","params":{"callbackGasLimit":"How much gas you'd like to receive in your receiveBlocklock callback. Note that gasleft() inside receiveBlocklock may be slightly less than this amount because of gas used calling the function (argument decoding etc.), so you may need to request slightly more than you expect to have inside receiveBlocklock. The acceptable range is [0, maxGasLimit]","subId":"The subscription ID associated with the request"},"returns":{"requestID":"The unique identifier assigned to this randomness request."}},"requestSubscriptionOwnerTransfer(uint256,address)":{"params":{"newOwner":"- proposed new owner of the subscription","subId":"- ID of the subscription"}},"setSignatureSender(address)":{"params":{"newSignatureSender":"The new address to set."}}},"version":1},"userdoc":{"kind":"user","methods":{"acceptSubscriptionOwnerTransfer(uint256)":{"notice":"Accept subscription owner transfer."},"addConsumer(uint256,address)":{"notice":"Add a consumer to a subscription."},"calculateRequestPriceNative(uint32)":{"notice":"Calculates the estimated price in native tokens for a request based on the provided gas limit"},"cancelSubscription(uint256,address)":{"notice":"Cancel a subscription"},"createSubscription()":{"notice":"Create a subscription."},"estimateRequestPriceNative(uint32,uint256)":{"notice":"Estimates the request price in native tokens using a specified gas price"},"fundSubscriptionWithNative(uint256)":{"notice":"Fund a subscription with native.This method expects msg.value to be greater than or equal to 0."},"getActiveSubscriptionIds(uint256,uint256)":{"notice":"Paginate through all active subscriptions."},"getAllRequests()":{"notice":"Retrieves all requests."},"getRequest(uint256)":{"notice":"Retrieves a specific request by its ID."},"getSubscription(uint256)":{"notice":"Get a subscription."},"messageFrom((uint256,address))":{"notice":"Generates a message from the given request."},"pendingRequestExists(uint256)":{"notice":"Check to see if there exists a request commitment consumers for all consumers and keyhashes for a given sub."},"removeConsumer(uint256,address)":{"notice":"Remove a consumer from a subscription."},"requestRandomness(uint32)":{"notice":"Requests the generation of a random value."},"requestRandomnessWithSubscription(uint32,uint256)":{"notice":"Requests the generation of a random value."},"requestSubscriptionOwnerTransfer(uint256,address)":{"notice":"Request subscription owner transfer."},"setSignatureSender(address)":{"notice":"Sets signatureSender contract address."}},"version":1}},"settings":{"remappings":["@chainlink/contracts/=lib/randomness-solidity/lib/chainlink/contracts/","@ds-test/=lib/randomness-solidity/lib/forge-std/lib/ds-test/src/","@forge-std/=lib/randomness-solidity/lib/forge-std/src/","@openzeppelin/=lib/openzeppelin-contracts/","chainlink/=lib/randomness-solidity/lib/chainlink/","erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/","forge-std/=lib/forge-std/src/","halmos-cheatcodes/=lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/","openzeppelin-contracts-upgradeable/=lib/randomness-solidity/lib/openzeppelin-contracts-upgradeable/","openzeppelin-contracts/=lib/openzeppelin-contracts/","randomness-solidity/=lib/randomness-solidity/"],"optimizer":{"enabled":true,"runs":200},"metadata":{"bytecodeHash":"ipfs"},"compilationTarget":{"lib/randomness-solidity/src/interfaces/IRandomnessSender.sol":"IRandomnessSender"},"evmVersion":"shanghai","libraries":{}},"sources":{"lib/randomness-solidity/src/interfaces/IRandomnessSender.sol":{"keccak256":"0x58ee82c4f6e82e5ae2e8bb91760cd1094efd00010bfe0cad3b1aff837b4d94e5","urls":["bzz-raw://46f011b10b1b4f8fbbf6bb898e684056fc4b19e265ddc341f76beb2ee8058400","dweb:/ipfs/QmYouXM8jB7LK9TuESS1DwRpoH2sB9uHdEQZwYjHodyiAm"],"license":"MIT"},"lib/randomness-solidity/src/interfaces/ISubscription.sol":{"keccak256":"0x07d27a4b676a804ff8ada76aa683e9c30662c8df52fc68d105693444249db538","urls":["bzz-raw://7bc9b42007e254d3ec5acbdcc231425e22164628b7fc829107e3cc85347425c7","dweb:/ipfs/QmTN1iW12TgtQaAdXLr5uCmaG8meG67ocGmJ37sikBCW1H"],"license":"MIT"},"lib/randomness-solidity/src/libraries/BLS.sol":{"keccak256":"0x3f8dfc97014975855476cd77959369694c33afc1f2977572b41db3e467e85098","urls":["bzz-raw://3734a6336c7602a389b6844e34757bcd72a964709da7f41cc644cab28742624d","dweb:/ipfs/QmTj5BZbsAvwhG75zxRDGDz6QhYgaU2BzqjbJSP2puLHU1"],"license":"MIT"},"lib/randomness-solidity/src/libraries/ModExp.sol":{"keccak256":"0x91d21821894be2362f9defd2d74b7531704d0f62f7c5a165f37bc486e5d4f785","urls":["bzz-raw://73f4ecf35a84174528f26b1e91aed78dea7f22d1f6a2006a11a5b22ea3e446aa","dweb:/ipfs/QmRyq3TAChiN5ga1TgXTG278n7KrUuTcPzoMj96Q5jdSqB"],"license":"MIT"},"lib/randomness-solidity/src/libraries/TypesLib.sol":{"keccak256":"0xafa1f2d1d0ed8ff42f40f2ce8dff3ca4b63118521b4673a34f8f801af25ffc0c","urls":["bzz-raw://ab5a20714ed923c65c945271015d9161613c101fdf533635cc85c0b871ab6d44","dweb:/ipfs/QmaHEBcg64VZGxvZmus3SZuv58eLc63JYfZikCaWiRJnf8"],"license":"MIT"}},"version":1},"id":21}